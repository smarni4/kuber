#!/usr/local/bin/bash

: '
echo ______________Section4 positional parameters script_____________

echo "Enter the operand and number you want to add/substract."
echo "The first number:${2:-0}"
echo "The second number:${3:0}"
echo "The third number:${4:-0}"
echo "The fourth number:${5:-0}"
echo "The fifth number:${6:-0}"
echo "The sixth number:${7:-0}"
echo "The seventh number is:${8:-0}"
echo "The eighth number is:${9:-0}"
echo "The ninth number is:${10:-Empty}"
echo

echo $((${2:-0} $1 ${3:-0} $1 ${4:-0} $1 ${5:-0} $1 ${6:-0} $1 ${7:-0} $1 ${8:-0} $1 ${9:-0} $1 ${10:-0}))

# The format ${parameter:-word} is used to resolve the issue of parameter missing. It replaces 
# the value given in the place of word, if the parameter is missed.

# While calling the script we have to provide the values to the positional parameters such as 
# ./positional_script +/- 1 3 4 7 7 5 3 2
echo
echo ___________Special parameters___________________
echo
#____________'$#'_______________
echo
echo '$# - shows the number of inputs'
echo $#
echo
echo '$0 - prints the current file name'
echo $0
echo
echo ______________'$@'_________________
echo
echo '$@ - prints the arguments given by the user by refering to Internal Field seperator space'
echo " The argumnets provided  by the user are $@"
touch $@
ls
rm $@
echo
echo  ______________'"$@"'____________________
echo
echo '"$@" - prints the arguments given by the user without refering to the IFS. It prints as the user wanted.'
echo "THe arguments provided by the user are "$@""
touch "$@"
ls
rm "$@"
echo
echo ______________'$*'___________________
echo
echo '$* - Prints the values as same as $@'
echo " The arguments provided are $*"
touch $*
ls
rm $*
echo
echo ______________'"$*"'__________________
echo
IFS=,
echo '"$*" -Prints the values entered by the user along with the choosen IFS'
echo I entered , as the IFS and the arguments provided by the user are "$*"
echo
'
echo ____________________Project____________________
echo
echo $(($@))
